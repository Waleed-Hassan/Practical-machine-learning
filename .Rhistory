if (x>3) {y<-10
} else {
y<-0
}
x<-c("a","b","c","d")
for(iin1:4) {print(x[i])}
for(i in1:4) {print(x[i])}
for(i in 1:4) {print (x[i])}
x<-matrix(1:6,2,3)
for(i in seq_len(nrow(x))) {for(j in seq_len(ncol(x)))} {print (x[i,j])}
for(i in seq_len(nrow(x))) {for(j in seq_len(ncol(x))) {print (x[i,j]) } }
coin <- rbinom(1,1,0.5)
coin
coin
coin
coin
coin
coin
coin
z<-5
while(z>= 3 && z<= 10) {print(z)
coin<- rbinom(1,1,0.5)
if (coin==1){
z<- z + 1
} else {
z<- z - 1
}
}
for (i in 1:100) {if(i <=20) {next}}
^([a-z]+) +\1 +[a-z]+ [0-9]
?grep
grep(she likes rum raisin after running hard)
grep(^s(.*?)r)
?S4
?getclass
??getclass
?getClass()
?showMethods()
?getS3method()
?getMethod()
?setOldClass()
>rgb
?rgb
?grep
ls
ls()
?read.table
? hist
w<- nrand(1:1000)
library("knitr", lib.loc="C:/Users/Waleed/Documents/R/win-library/3.1")
library("manipulate", lib.loc="~/R/win-library/3.1")
install.packages(c("ggplot2", "Rcpp"))
install.packages("manipulate")
library("manipulate", lib.loc="~/R/win-library/3.1")
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data(galton)
library("UsingR", lib.loc="~/R/win-library/3.1")
data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74))
?manipulate
?slider
manipulate(myHist(mu), mu = slider(62, 74))
data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74))
hist(galton$child,col="blue",breaks=100)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74))
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74))
manipulate(myHist(mu), mu = slider(62, 74))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
myHist(5)
myHist(50)
myHist(70)
par(mfrow=c(1,1))
myHist(70)
manipulate(myHist(mu), mu = slider(62, 74, step=1))
?slider
manipulate(myHist(mu), mu = slider(62, 74))
manipulate(
plot(cars, xlim=c(x.min,x.max)),
x.min=slider(0,15),
x.max=slider(15,30))
install.packages("manipulate")
install.packages("manipulate")
install.packages("manipulate")
?manipulate
library(manipulate)
manipulate(plot(1:x), x=slider(1,100))
manipulate(plot(1:x), x=slider(1,100))
manipulate(myHist(mu), mu = slider(62, 74))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
View(freqData)
View(freqData)
View(freqData)
x <- c(1,1,1,1,2,1,3,4,5,6,6)
length(x)
y <- c(9,9,9,2,3,4,5,6,6,6,6)
table(x,y)
as.data.frame(table(x, y))
1.2
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
manipulate(myPlot(beta), beta = slider(0.6, 0.65, step = 0.0001))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
myPlot <- function(beta){
w
x
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
w, x,
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 0.65, step = 0.0001))
myPlot <- function(beta){
w
x
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
w, x,
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (w - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 0.65, step = 0.0001))
myPlot <- function(beta){
w
x
freqData <- as.data.frame(table(x, w))
names(freqData) <- c("child", "parent", "freq")
plot(
w, x,
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (w - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 0.65, step = 0.0001))
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
w <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
manipulate(myPlot(beta), beta = slider(0.6, 0.65, step = 0.0001))
manipulate(myPlot(beta), beta = slider(0.6, 5, step = 0.5))
manipulate(myPlot(beta), beta = slider(0, 2, step = 0.05))
x <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
w <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
manipulate(myPlot(beta), beta = slider(0, 2, step = 0.05))
data(mtcars)
fit <- lm(mtcars$mpg, mtcars$weight)
fit <- lm(mpg ~ weight, data= mtcars)
head(mtcars)
fit <- lm(mpg ~ wt, data= mtcars)
fit
fit <- lm(x ~ w)
fit
q <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(q)
x <- c(0.18, -1.54, 0.42, 0.95)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x2 <- c(0.18, 0.18. -1.54, .42, .42, .42, .95)
x2 <- c(0.18, 0.18, -1.54, .42, .42, .42, .95)
myHist <- function(mu){
hist(x2,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((x2 - mu)^2)
text(-1, 2, paste("MSE = ", round(mse, 5)))
}
manipulate(myHist(mu), mu = slider(-1.6,0.95, step = 0.001))
data(mtcars)
data(mtcars)
str(mtcars)
data<- mtcars
View(mtcars)
View(mtcars)
View(data)
View(data)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am)
levels(mtcars$am) <- c("Auto", "Manual")
View(mtcars)
View(data)
plot(mpg ~ am, data = mtcars, main = "Mpg by transmission type", xlab = "Transmission type", ylab = "Miles per gallon")
pairs(mtcars, panel = panel.smooth, main = "Pairs graph for MTCars")
plot(mpg ~ am, data = mtcars, main = "Mpg by transmission type", xlab = "Transmission type", ylab = "Miles per gallon")
par(mfrow = c(2, 2))
plot(fitted(model), residuals(model), xlab = "Fitted values", ylab = "Residuals", main = "Residuals vs Fitted")
abline(h = 0, col = "red")
qqnorm(residuals(model))
qqline(residuals(model), col = "red")
plot(fitted(model), sqrt(abs(rstandard(model))), xlab = "Fitted values", ylab = "Square Root of Standardized Residuals", main = "Scale-Location")
t.test(mpg ~ am, data = mtcars)
pairs(mtcars, panel = panel.smooth, main = "Pairs graph for MTCars")
model.all <- lm(mpg ~ ., data = mtcars)
n <- nrow(mtcars)
model <- step(model.all, direction = "backward", k = log(n))
summary(model)$coefficients
?step
coef(model)
plot(mtcars$am, resid(model))
par(1,1)
plot(mtcars$am, resid(model))
par(mfrow=c(1,1))
plot(mtcars$am, resid(model))
plot(mtcars$am, resid(model), ylab= residuals, title= heteroskedacticity)
plot(mtcars$am, resid(model), ylab= residuals, Title= heteroskedacticity)
plot(mtcars$am, resid(model), ylab= residuals)
plot(mtcars$am, resid(model))
plot(mtcars$am, resid(model), ylab="Residuals")
plot(mtcars$am, resid(model), ylab="Residuals", title="Heteroskedacticity")
plot(mtcars$am, resid(model), ylab="Residuals", title="Heteroskedacticity")
plot(mtcars$am, resid(model), ylab="Residuals", main="Heteroskedacticity")
?step
model.all <- lm(mpg ~ ., data = mtcars)
n <- nrow(mtcars)
model <- step(model.all, direction = "backward", k = log(n))
summary(model)$coefficients
t.test(mpg ~ am, data = mtcars)
mean(mtcars$mpg, by(mtcars$am))
aggregate(mtcars$mpg, list=(mtcars$am), mean)
?aggregate
aggregate(mtcars$mpg, list=(mtcars$am), FUN= mean)
aggregate(mtcars$mpg,by(mtcars$am), FUN= mean)
?appky
?apply
aggregate(mtcars$mpg,by(mtcars$am), FUN= mean)
?aggregate
aggregate(mpg, by(am), mean, data="mtcars")
aggregate(mpg, by=list(am), mean, data="mtcars")
aggregate(mtcars$mpg, by=list(mtcars$am), mean)
aggregate(mtcars$mpg, by=list(mtcars$am), mean) -> w
w[1,2]-w[1,1]
str(w)
?mean
mean(mtcars[mtcars$am=="Manual","mpg"])-mean(mtcars[mtcars$am=="Auto","mpg"])
t.test(mpg ~ am, data = mtcars)
t.test(mpg ~ am, data = mtcars) -> w
w[p-value]
coef(w)
str(w)
w$p.value
w$estimate
?step
model.all <- lm(mpg ~ ., data = mtcars)
model <- step(model.all, direction = "forward", k = log(n))
summary(model)$coefficients
model.all <- lm(mpg ~ ., data = mtcars)
n <- nrow(mtcars)
model <- step(model.all, direction = "backward", k = log(n))
summary(model)$coefficients
model.all <- lm(mpg ~ ., data = mtcars)
model <- step(model.all, direction = "backward", k = log(n))
summary(model)$coefficients
str(summary(model)$coefficients)
plot(mtcars$am, resid(model), ylab="Residuals", main="Heteroskedacticity")
lm(mpg~ cyl + wt, data= mtcars)
lm(mpg~ cyl, data= mtcars)
lm(mpg ~ I(wt * 0.5) + cyl, data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
anova <- anova(lm(mpg ~ am, data = mtcars), lm(mpg ~ am + qsec, data = mtcars), lm(mpg ~ am + wt + qsec, data = mtcars))
cbind(anova[1], anova[2], anova[3], anova[4], anova[5], anova[6])
data(mtcars)
lm(mpg ~ wt + factor(cyl), data = mtcars)
lm(mpg ~ wt + factor(cyl), data = mtcars) -> w
w
coef(w)
summary(w)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
library(caret)
install.packages("iterators")
library(caret)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
View(training)
featureplot(y=training$CompressiveStrength, plot = 'pairs')
featurePlot(y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,], y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,Age], y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,"Age"], y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,"FlyAsh"], y=training$CompressiveStrength, plot = 'pairs')
cut <- cut2(training$CompressiveStrength, g=4)
library("Hmisc", lib.loc="~/R/win-library/3.1")
cut <- cut2(training$CompressiveStrength, g=4)
featurePlot(x= training[,"FlyAsh"], y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,], y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,"Age"], y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,], y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,"Age"], y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training, y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,"row.names"], y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,1], y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,0], y=training$CompressiveStrength, plot = 'pairs')
featurePlot(x= training[,1], y=training$CompressiveStrength, plot = 'pairs')
colnames(training[1]         )
colnames(training[0])
colnames(training[0])<-"index"
col.names(training[1])<-"test"
colnames(training[1])<-"test"
colnames(training[1])
head(training)
head(concrete)
plot(c(1:nrow(training))training$CompressiveStrength)
plot(c(1:nrow(training)),training$CompressiveStrength)
plot(c(1:nrow(training)),training$CompressiveStrength, col=training$water)
ggplot2(c(1:nrow(training)),training$CompressiveStrength, col=training$water)
library(ggplot2)
ggplot2(c(1:nrow(training)),training$CompressiveStrength, col=training$water)
gplot(c(1:nrow(training)),training$CompressiveStrength, col=training$water)
qplot(c(1:nrow(training)),training$CompressiveStrength, colour=training$water)
qplot(c(1:nrow(training)),training$CompressiveStrength, colour=water, data=training)
qplot(c(1:nrow(training)),training$CompressiveStrength, colour=Water, data=training)
qplot(c(1:nrow(training)),training$CompressiveStrength, colour=FlyAsh, data=training)
qplot(c(1:nrow(training)),training$CompressiveStrength, colour=Cement, data=training)
qplot(c(1:nrow(training)),training$CompressiveStrength, colour=BlastFurnaceSlag, data=training)
qplot(c(1:nrow(training)),training$CompressiveStrength, colour=CoarseAggregate, data=training)
qplot(c(1:nrow(training)),training$CompressiveStrength, colour=Age, data=training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
str(training)
hist(training$SuperPlasticizer)
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(log(training$Superplasticizer))
hist((training$Superplasticizer)
)
hist(training$Superplasticizer+1)
hist(log(training$Superplasticizer+1))
hist(log10(training$Superplasticizer+1))
hist(training$Superplasticizer+1)
hist(log(training$Superplasticizer+1))
hist(log(training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
data(AlzheimerDisease)
View(predictors)
View(predictors)
str(oredictors)
str(predictors)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
View(adData)
View(adData)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)$diagnosis
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)$1
inTrain
IL_str <- grep("^IL", colnames(training), value = TRUE)
IL_str <- grep("^IL", colnames(adData), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.8)
preProc <- preProcess(adData[, IL_str], method = "pca", thresh = 0.8)
preProc$rotation
setwd("~/REDcap projects/the prototype code/generic")
data <- read.csv("liver.csv")
View(data)
View(data)
str(data$Did.the.patient.has.any.event..)
setwd("~/courses/Data science specialization/8- Machine Learning/Practical-Machine-Learning-master")
load("~/courses/Data science specialization/8- Machine Learning/Practical-Machine-Learning-master/Practical-Machine-Learning-master/.RData")
setwd("~/courses/Data science specialization/8- Machine Learning/Practical-Machine-Learning-master/Practical-Machine-Learning-master")
install.packages("randomForest")
View(data)
View(data)
